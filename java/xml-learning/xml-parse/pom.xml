<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>xml-learning</artifactId>
        <groupId>xml-learning</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>xml-parse</artifactId>
    <packaging>pom</packaging>
    <!--
    1. DOM
    特点：
    其处理方式是将 XML 整个作为类似树结构的方式读入内存中
    优点：
    1） 实现 W3C 标准，有多种编程语言支持这种解析方式。
    2） 支持应用程序对 XML 数据的内容和结构进行修改
    缺点:
    由于其需要在处理开始时将整个 XML 文件读入到内存中去进行分析，因此其在解析大数据量的 XML 文件时会遇到类似于内存泄露以及程序崩溃的风险
    适用范围：
    小型 XML 文件解析、需要全解析或者大部分解析 XML、需要修改 XML 树内容以生成自己的对象模型

    2. SAX
    特点:
    其实现是通过类似于流解析的技术，通过事件处理器来响应程序员对于 XML 数据解析的需求。
    优点：
    1）SAX 从根本上解决了 DOM 在解析 XML 文档时产生的占用大量资源的问题。由于其不需要将整个 XML 文档读入内存当中，它对系统资源的节省是十分显而易见的
    2) 支持 XPath 查询的 SAX 使得开发人员更加灵活，处理起 XML 来更加的得心应手。
    缺点：
    1)由于其是属于类似流解析的文件扫描方式，因此不支持应用程序对于 XML 树内容结构等的修改，可能会有不便之处。
    2)十分复杂的 API 接口令人望而生畏，
    适用范围：大型 XML 文件解析、只需要部分解析或者只想取得部分 XML 树内容、有 XPath 查询需求、有自己生成特定 XML 树对象模型的需求
    -->

    <modules>
        <module>dom</module>
        <module>sax</module>
    </modules>



</project>