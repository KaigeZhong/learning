1、线程异步：

       异步和同步是相对的，异步就是彼此独立，在等待某事件的过程中继续做自己的事，不需要等待这一事件完成后再工作。
       线程就是实现异步的一个方式。异步是让调用方法的主线程不需要同步等待另一线程的完成，从而可以让主线程干其它的事情。异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回而可以做其它的事情。
       异步和多线程并不是一个同等关系，异步是最终目的， 多线程只是我们实现异步的一种手段。实现异步可以采用多线程技术或则交给另外的进程来处理。
   
2、线程同步：

         是指多个线程通过特定的设置（如互斥量、事件对象、临界区）来控制线程之间的执行顺序。同步就是顺序执行，执行完一个再执行下一个，需要等待、协调运行。
   也就是说，线程之间通过同步建立起执行顺序的关系，如果没有同步，那线程之间是各自运行各自的！
   

3、线程互斥：

      是指对于共享的进程系统资源，在各单个线程访问时的排它性。当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。
       线程互斥可以看成是一种特殊的线程同步。
   
同步与异步
  同步是一种更为复杂的互斥，而互斥是一种特殊的同步。也就是说互斥是两个任务之间不可以同时运行，他们会相互排斥，必须等待一个线程运行完毕，另一个才能运行，而同步也是不能同时运行，但他是必须要安照某种次序来运行相应的线程（也是一种互斥）！因此互斥具有唯一性和排它性，但互斥并不限制任务的运行顺序，即任务是无序的，而同步的任务之间则有顺序关系。





四种进程或线程同步互斥的控制方法

1、临界区(Critical Section):通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问。 

2、互斥量(Mutex):为协调共同对一个共享资源的单独访问而设计的。 

3、信号量(Semaphores):为控制一个具有有限数量用户资源而设计。 

4、事 件(Event):用来通知线程有一些事件已发生，从而启动后继任务的开始。 


临界区: 只能线程内部使用
互斥量（Mutex），信号灯（Semaphore），事件（Event）都可以被跨越进程使用来进行同步数据操作
