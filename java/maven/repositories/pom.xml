<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>maven</artifactId>
        <groupId>maven</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>repositories</artifactId>
    <packaging>pom</packaging>
    <modules>
        <module>repositories-child</module>
    </modules>


    <!--
    运行Maven的时候，Maven所需要的任何构件都是直接从本地仓库获取的。
    如果本地仓库没有，它会首先尝试从远程仓库下载构件至本地仓库，然后再使用本地仓库的构件。

    本地仓库：
    . Maven缺省的本地仓库地址为${user.home}/.m2/repository
    . 自定义本地仓库的位置，修改${user.home}/.m2/settings.xml
      <localRepository>D:/.m2/repository</localRepository>
    . 还可以在运行时指定本地仓库位置：
        mvn clean install -Dmaven.repo.local=/home/juven/myrepo/

    远程仓库:
    . 通过repositories设置远程仓库
    . Maven的缺省远程仓库是super pom中的central中央仓库
    . 搜索顺序：1. 先child pom中的repositories仓库列表，搜索不到再搜索parentpom
              2. 按照pom的repositories中的仓库列表顺序搜索
      当id相同时，child pom的同一个repository会覆盖parent中的，例如仓库id设置成central会覆盖super pom默认的中央仓库配置

    -->


    <dependencies>
        <!--<dependency>-->
            <!--<groupId>custom.kg</groupId>-->
            <!--<artifactId>custom.kg</artifactId>-->
            <!--<version>1.1</version>-->
        <!--</dependency>-->
    </dependencies>

    <!--指定获取依赖的远程仓库列表-->
    <repositories>

        <!--远程-->
        <repository>
            <!--搜索顺序: oschina, sonatype, aliyun, jboss, central-->
            <id>aliyun</id>
            <!--如果仓库id设置成central会覆盖super pom默认的中央仓库配置-->
            <!--搜索顺序: oschina, sonatype, central, jboss-->
            <!--<id>central</id>-->
            <name>aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </repository>

        <repository>
            <id>jboss</id>
            <name>jbos</name>
            <url>http://repository.jboss.com/maven2/</url>
        </repository>


    </repositories>
</project>